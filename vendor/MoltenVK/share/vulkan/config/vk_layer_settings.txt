# The settings in this file can be used to configure the behavior of
# layers in this repository.
#
# Note that this file is not regulary updated, so not all possible layer
# settings may be listed, and some layer settings may even be obsolete.

# VK_LAYER_KHRONOS_validation

# Debug Action
# =====================
# <LayerIdentifier>.debug_action
# Specifies what action is to be taken when a layer reports information
khronos_validation.debug_action = VK_DBG_LAYER_ACTION_LOG_MSG

# Log Filename
# =====================
# <LayerIdentifier>.log_filename
# Specifies the output filename
khronos_validation.log_filename = stdout

# Message Severity
# =====================
# <LayerIdentifier>.report_flags
# Comma-delineated list of options specifying the types of messages to be
# reported
khronos_validation.report_flags = error

# Limit Duplicated Messages
# =====================
# <LayerIdentifier>.enable_message_limit
# Enable limiting of duplicate messages.
khronos_validation.enable_message_limit = true

# Max Duplicated Messages
# =====================
# <LayerIdentifier>.duplicate_message_limit
# Maximum number of times any single validation message should be reported.
khronos_validation.duplicate_message_limit = 10

# Mute Message VUIDs
# =====================
# <LayerIdentifier>.message_id_filter
# List of VUIDs and VUID identifers which are to be IGNORED by the validation
# layer
khronos_validation.message_id_filter =

# Disables
# =====================
# <LayerIdentifier>.disables
# Specify areas of validation to be disabled
khronos_validation.disables = VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT

# Enables
# =====================
# <LayerIdentifier>.enables
# Setting an option here will enable specialized areas of validation
khronos_validation.enables =

# Redirect Printf messages to stdout
# =====================
# <LayerIdentifier>.printf_to_stdout
# Enable redirection of Debug Printf messages from the debug callback to stdout
#khronos_validation.printf_to_stdout = true

# Printf verbose
# =====================
# <LayerIdentifier>.printf_verbose
# Set the verbosity of debug printf messages
#khronos_validation.printf_verbose = false

# Printf buffer size
# =====================
# <LayerIdentifier>.printf_buffer_size
# Set the size in bytes of the buffer used by debug printf
#khronos_validation.printf_buffer_size = 1024

# Check descriptor indexing accesses
# =====================
# <LayerIdentifier>.gpuav_descriptor_checks
# Enable descriptor indexing and buffer out of bounds checking
#khronos_validation.gpuav_descriptor_checks = true

# Check Draw/Dispatch/TraceRays Indirect Buffers
# =====================
# <LayerIdentifier>.validate_indirect_buffer
# Enable draw/dispatch/traceRays indirect checking
#khronos_validation.validate_indirect_buffer = true

# Cache instrumented shaders rather than instrumenting them on every run
# =====================
# <LayerIdentifier>.use_instrumented_shader_cache
# Enable instrumented shader caching
#khronos_validation.use_instrumented_shader_cache = true

# Select which shaders to instrument by passing a VkValidationFeaturesEXT struct with GPU-AV enabled in the VkShaderModuleCreateInfo pNext
# =====================
# <LayerIdentifier>.
# Enable selection of shaders to instrument
#khronos_validation.select_instrumented_shaders = false

# Use linear vma allocator for GPU-AV output buffers
# =====================
# <LayerIdentifier>.gpuav_vma_linear_output
# Use VMA linear memory allocations for GPU-AV output buffers
#khronos_validation.vma_linear_output = true

# Specify the maximum number of buffer device addresses in simultaneous use
# =====================
# <LayerIdentifier>.gpuav_max_buffer_device_addresses
# Specify the maximum number of buffer device addresses to allow GPU-AV allocate resources
#khronos_validation.gpuav_max_buffer_device_addresses = 10000

# Fine Grained Locking
# =====================
# <LayerIdentifier>.fine_grained_locking
# Enable fine grained locking for Core Validation, which should improve
# performance in multithreaded applications.
khronos_validation.fine_grained_locking = true

# Best Practices
# =====================
# Enable best practices layer
khronos_validation.enables=VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT

# Best Practices with ARM best practices
# =====================
# Enable best practices layer
khronos_validation.enables=VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,VALIDATION_CHECK_ENABLE_VENDOR_SPECIFIC_ARM

# Best Practices with AMD best practices
# =====================
# Enable best practices layer
khronos_validation.enables=VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,VALIDATION_CHECK_ENABLE_VENDOR_SPECIFIC_AMD

# Best Practices with Imagination Tech best practices
# =====================
# Enable best practices layer
khronos_validation.enables=VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,VALIDATION_CHECK_ENABLE_VENDOR_SPECIFIC_IMG

# Best Practices with Nvidia Specific Check
# =====================
# Enable best practices layer
khronos_validation.enables=VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,VALIDATION_CHECK_ENABLE_VENDOR_SPECIFIC_NVIDIA

# Best Practices with ALL Vendor Specific Checks
# =====================
# Enable best practices layer
khronos_validation.enables=VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,VALIDATION_CHECK_ENABLE_VENDOR_SPECIFIC_ALL

# The settings in this file can be used to configure the behavior of
# layers in this repository.
#
# Note that this file is not regulary updated, so not all possible layer
# settings may be listed, and some layer settings may even be obsolete.

# VK_LAYER_LUNARG_api_dump

# Output Range
# =====================
# <LayerIdentifier>.output_range
# Comma separated list of frames to output or a range of frames with a start,
# count, and optional interval separated by a dash. A count of 0 will output
# every frame after the start of the range. Example: "5-8-2" will output frame
# 5, continue until frame 13, dumping every other frame. Example: "3,8-2" will
# output frames 3, 8, and 9.
lunarg_api_dump.output_range = 0-0

# Output Format
# =====================
# <LayerIdentifier>.output_format
# Specifies the format used for output; can be HTML, JSON, or  Text (default --
# outputs plain text)
lunarg_api_dump.output_format = text

# Output to File
# =====================
# <LayerIdentifier>.file
# Setting this to true indicates that output should be written to file instead
# of stdout
lunarg_api_dump.file = false

# Log Filename
# =====================
# <LayerIdentifier>.log_filename
# Specifies the file to dump to when output files are enabled
#lunarg_api_dump.log_filename = stdout

# Log Flush After Write
# =====================
# <LayerIdentifier>.flush
# Setting this to true causes IO to be flushed after each API call that is
# written
lunarg_api_dump.flush = true

# Name Size
# =====================
# <LayerIdentifier>.name_size
# The number of characters the name of a variable should consume, assuming more
# are not required
lunarg_api_dump.name_size = 32

# Show Types
# =====================
# <LayerIdentifier>.show_types
# Dump types in addition to values
lunarg_api_dump.show_types = true

# Type Size
# =====================
# <LayerIdentifier>.type_size
# The number of characters the name of a type should consume, assuming more are
# not required
lunarg_api_dump.type_size = 0

# Show Timestamp
# =====================
# <LayerIdentifier>.show_timestamp
# Show the timestamp of function calls since start in microseconds
lunarg_api_dump.show_timestamp = false

# Show Shader
# =====================
# <LayerIdentifier>.show_shader
# Dump the shader binary code in pCode
lunarg_api_dump.show_shader = false

# Show Parameter Details
# =====================
# <LayerIdentifier>.detailed
# Dump parameter details in addition to API calls
lunarg_api_dump.detailed = true

# Hide Addresses
# =====================
# <LayerIdentifier>.no_addr
# Dump "address" in place of hex addresses
lunarg_api_dump.no_addr = false

# Use Spaces
# =====================
# <LayerIdentifier>.use_spaces
# Setting this to true causes all tab characters to be replaced with spaces
lunarg_api_dump.use_spaces = true

# Indent Size
# =====================
# <LayerIdentifier>.indent_size
# Specifies the number of spaces that a tab is equal to
lunarg_api_dump.indent_size = 4

# Show Thread and Frame
# =====================
# <LayerIdentifier>.show_thread_and_frame
# Show the thread and frame of each function called
lunarg_api_dump.show_thread_and_frame = true


# VK_LAYER_LUNARG_screenshot

# Frames
# =====================
# <LayerIdentifier>.frames
# Specifies list of frames to output as screenshots. It is specified as a
# comma-separated list of frames or a range of frames with a start, count, and
# optional interval separated by a dash. Setting the variable to "all" will
# output every frame. Example: "5-8-2" will output frame 5, continue until frame
# 13, dumping every other frame. Example: "3,8-2" will output frames 3, 8, and
# 9. If it is not set or it set to an empty string, no screenshots are created.
lunarg_screenshot.frames = 

# Directory
# =====================
# <LayerIdentifier>.dir
# Specifies the directory in which to create the screenshot files. If it is not
# set or is set to an empty string, the files will be created in the current
# working directory.
lunarg_screenshot.dir = 

# Format
# =====================
# <LayerIdentifier>.format
# Specify a color space for the output. If it is not set, set to null, or set to
# USE_SWAPCHAIN_COLORSPACE the format will be set to use the same color space as
# the swapchain object.
lunarg_screenshot.format = USE_SWAPCHAIN_COLORSPACE

# The settings in this file can be used to configure the behavior of
# layers in this repository.
#
# Note that this file is not regulary updated, so not all possible layer
# settings may be listed, and some layer settings may even be obsolete.

# VK_LAYER_KHRONOS_synchronization2

# Force Enable
# =====================
# <LayerIdentifier>.force_enable
# Force the layer to be active even if the underlying driver also implements the
# synchonization2 extension.
khronos_synchronization2.force_enable = false

# VK_LAYER_KHRONOS_shader_object

# Force Enable
# =====================
# <LayerIdentifier>.force_enable
# Force the layer to be active even if the underlying driver also implements the
# shader object extension.
khronos_shader_object.force_enable = false

# VK_LAYER_KHRONOS_memory_decompression

# Force Enable
# =====================
# <LayerIdentifier>.force_enable
# Force the layer to be active even if the underlying driver also implements the
# memory decompression extension.
khronos_memory_decompression.force_enable = true
